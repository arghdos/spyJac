from distutils.core import setup
from distutils.extension import Extension
from Cython.Build import cythonize
import numpy

"""[[[cog
    from six.moves import cPickle as pickle
    from pyjac.utils import stringify_args, listify

    # unserialize the setupgen object
    with open(setupgen, 'rb') as file:
        setupgen = pickle.load(file)

    cog.outl('sources = ["{}"]'.format(setupgen.wrapper))
    cog.outl('includes = [{}]'.format(stringify_args(
        [setupgen.build_dir] + listify(setupgen.include_dirs), use_quotes=True)))
    cog.outl('name = "pyjac_{}"'.format(setupgen.package_lang))
    if setupgen.package_lang == 'c':
        # include openmp
        cog.outl('compile_args = ["-fopenmp"]')
    else:
        cog.outl('compile_args = []')
    cog.outl('name = "{}_{}"'.format(setupgen.name, setupgen.package_lang))
    cog.outl('libname = "{}"'.format(setupgen.libname))
    cog.outl('libs = [{}]'.format(stringify_args(
        setupgen.libraries, use_quotes=True)))
    cog.outl('libdirs = [{}]'.format(stringify_args(
        setupgen.libdirs, use_quotes=True)))
]]]
[[[end]]]"""
includes = [x for x in includes if x.strip()]

ext_module = Extension(name,
                       sources=sources,
                       include_dirs=includes + [numpy.get_include()],
                       language="c++",
                       extra_compile_args=['-frounding-math', '-fsignaling-nans',
                                           '-std=c++11'] + compile_args,
                       extra_objects=[libname],
                       libraries=libs,
                       library_dirs=libdirs)

setup(
    name=name,
    ext_modules=cythonize(ext_module, include_path=includes,
                          compiler_directives={'language_level': 3})
)
