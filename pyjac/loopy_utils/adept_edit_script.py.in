#! /usr/bin/env python

"""
A simple script that acts as the 'EDITOR' for auto-differentiation code generation,
implementing a wrapper around the given kernels that:

1) Sets up Adept's stack / recording for auto-diff
2) Copies data to / from vectors of Adept adoubles (per-initial condition)
3) Calls kernels with the adoubles, and
4) Computes and stores the auto-differentiated Jacobian

"""

import sys
import re
import textwrap


def __get_file(filename, text_in=None):
    if filename.lower() == 'stdin':
        lines = text_in.split('\n')
    else:
        with open(filename, 'r') as file:
            lines = file.readlines()
    return lines


def __save_file(filename, lines):
    if filename.lower() != 'stdin':
        with open(filename, 'w') as file:
            file.writelines(lines)


def substitute(filename, text_in=None):
    # first replace what will become the inner kernel with the single indexed
    # version

    lines = textwrap.dedent("""${base_kernels}""").splitlines(True)

    first_body = None
    index = 0
    while index < len(lines):
        # search for next function body
        body_at = None
        for i, line in enumerate(lines[index:]):
            if line.strip() == '{':
                body_at = i + index
                break

        if body_at is None:
            break
        if index == 0:
            first_body = body_at

        nest_level = 1
        # first, replace all double's with adoubles
        # and substitute problem_size and j for zero, to correct indexing
        for i in range(body_at - 1, len(lines)):
            # track brace nesting level
            if lines[i].strip() == '{' and i != body_at:
                nest_level += 1
            elif lines[i].strip() == '}':
                nest_level -= 1
            # see if we've reached the end of the function
            if nest_level == 0:
                index = i + 1
                break
            # replace double in func defn w/ adouble
            lines[i] = re.sub(r'double\b(?![^,]+${jac_name})', 'adouble', lines[i])
            if i >= body_at:
                # a single vector at a time
                lines[i] = lines[i].replace(str(${problem_size} - 1), '0')

                # we no longer need to replace j's in function body, as C-operates
                # on a single condition by default now.
                # lines[i] = lines[i].replace('j', '0')

                # check for fmax
                fmax_re = re.compile(r'fmax\((.+),(.+)\);')
                fmin_re = re.compile(r'fmin\((.+),(.+)\);')
                for r in [fmax_re, fmin_re]:
                    match = r.search(lines[i])
                    if match:
                        # find which is not a number
                        for ind, group in enumerate(match.groups()):
                            try:
                                float(group)
                                continue
                            except ValueError:
                                # found non-float
                                group = ind + 1
                                break
                        lines[i] = r.sub('\\{};'.format(group), lines[i])
                # lines[i] = re.sub(
                # r'fmax\((.+),(.+)\);', r'std::max(adouble(\1), \2);', lines[i])

        # next we have to rename the inner function
        lines[body_at - 1] = re.sub(r'void\s*([\w_]+)', r'void ad_\1',
                                    lines[body_at - 1])

    # add adouble stuff
    lines.insert(0, '#include "adept.h"\n#include<iostream>\n')
    lines.insert(1, 'using adept::adouble; // Import Stack and adouble from adept\n')

    # insert new calling function after last body

    lines.append("""

extern "C" {
${function_defn}{
    #pragma omp parallel for
    for (int ad_j = 0; ad_j < ${problem_size}; ++ad_j)
    {
        // Where the derivative information is stored
        adept::Stack stack;
        //initialize variables
        ${initializers}
        // Start recording
        stack.new_recording();
        // Create vector of active output variables
        std::vector<adouble> ${ad_dep_name}(${dep_size});
        // Run algorithm
        ${kernel_calls}
        // Identify independent variables
        stack.independent(&${ad_indep_name}[0], ${indep_size});
        // Identify dependent variables
        stack.dependent(&${ad_dep_name}[0], ${dep_size});
        // Compute & store Jacobian in jac
        stack.jacobian(${jac_base_offset});
        ${setters}
    }
}
}
        """)

    # replace restrict with __restrict__
    for i in range(len(lines)):
        lines[i] = re.sub(r'restrict\b', '__restrict__', lines[i])

    # and finally, remove any identical lines outside of function bodies
    nest_level = 0

    # first, go through and find all beginnings and endings of functions
    funcs = []
    in_func = False
    for i in range(len(lines)):
        # track brace nesting level
        if lines[i].strip() == '{':
            if nest_level == 0:
                funcs.append((i - 1, None))
            nest_level += 1
        elif lines[i].strip() == '}':
            nest_level -= 1
            if nest_level == 0:
                funcs[-1] = (funcs[-1][0], i)

    # next, check for duplicates of lines outside of functions
    mask = [True] * len(lines)
    check = set()
    func_ind = 0
    in_func = False
    for i in range(len(lines)):
        if in_func and i > funcs[func_ind][1]:
            # reached end of function
            in_func = False
            func_ind += 1
        elif not in_func and i >= funcs[func_ind][0]:
            # beginning of function
            in_func = True
        elif not in_func:
            # check for duplicates
            mask[i] = lines[i].strip() not in check
            check.add(lines[i].strip())

    # and finally check for duplicate functions
    func_strs = [lines[func[0]:func[1] + 1] for func in funcs]
    for i, func_str in reversed(list(enumerate(func_strs))):
        # if function defined before this
        if func_str in func_strs[:i]:
            # mark the mask
            mask[funcs[i][0]:funcs[i][1] + 1] = [False] * (
                funcs[i][1] + 1 - funcs[i][0])

    # and take the non masked lines
    new_lines = [lines[i] for i in range(len(lines)) if mask[i]]

    __save_file(filename, new_lines)
    return '\n'.join(new_lines)


if __name__ == '__main__':
    substitute(sys.argv[1], sys.argv[2:])
