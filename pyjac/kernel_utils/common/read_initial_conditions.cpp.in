/*

A cog-templated skeleton for reading of initial conditions from a binary file

(C) Nicholas Curtis - 2018

Global declarations for Cog:
    - readgen: path to a serialized ReadgenRecord instance
    that may be loaded to generate this file
*/

/*[[[cog
     from six.moves import cPickle as pickle
     from pyjac.core.array_creator import pressure_array, volume_array
     from pyjac.kernel_utils.tools import get_include
     from pyjac.utils import header_ext

     with open(readgen, 'rb') as file:
         readgen = pickle.load(file)

     from pyjac.kernel_utils.memory_tools import get_memory
     mem = get_memory(readgen)

     # headers
     cog.outl(get_include(readgen, 'mechanism'))
     cog.outl(get_include(readgen, 'vectorization'))
 ]]]
 [[[end]]]*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/time.h>

// size of a single input buffer
// total buffer size
#define BUFF_SIZE ((NN + 1))

//for sanity, the input data is expected to be in C-order

void read_initial_conditions(const char* filename, unsigned int NUM,
                             /*[[[cog
                                 arrys = []
                                 for arry in readgen.inputs:
                                    arrys.append(mem.get_signature(False, arry) + ',')
                                 cog.outl(' '.join(arrys))

                                 assert len(readgen.inputs) == 2
                                 param = next(x for x in readgen.inputs if x.name in [pressure_array, volume_array]).name
                                 phi = next(x for x in readgen.inputs if x.name != param).name
                              ]]]
                              [[[end]]]*/
                             const char order) {
    FILE *fp = fopen (filename, "rb");
    if (fp == NULL)
    {
        fprintf(stderr, "Could not open file: %s\n", filename);
        exit(-1);
    }

    double buffer[BUFF_SIZE];
    // load temperature, pressure and concentrations for all (cells)
    for (int i = 0; i < NUM; ++i)
    {
        // read line from data file
        int count = fread(buffer, sizeof(double), BUFF_SIZE, fp);
        if (count != (BUFF_SIZE))
        {
            fprintf(stderr, "File (%s) is incorrectly formatted, %d "
                "doubles were expected but only %d were read.\n",
                filename, BUFF_SIZE, count);
            exit(-1);
        }

        //fill the parameter array
        /*[[[cog
             cog.outl('{param}[i] = buffer[1];'.format(param=param))
          ]]]
          [[[end]]]*/

        // phi fill depends on order
        if (order == 'C')
        {
            //fill in temperature
            /*[[[cog
                 cog.outl('{phi}[i * NN] = buffer[0];'.format(phi=phi))
              ]]]
              [[[end]]]*/
            //fill in species moles
            for (int j = 0; j < NS; j++)
            {
                /*[[[cog
                     cog.outl('{phi}[i * NN + (j + 1)] = buffer[j + 2];'.format(phi=phi))
                  ]]]
                  [[[end]]]*/
            }
        }
        else
        {
            //fill in temperature
            /*[[[cog
                 cog.outl('{phi}[i] = buffer[0];'.format(phi=phi))
              ]]]
              [[[end]]]*/
            //fill in species moles
            for (int j = 0; j < NS; j++)
            {
                /*[[[cog
                     cog.outl('{phi}[(j + 1) * NUM + i] = buffer[j + 2];'.format(phi=phi))
                  ]]]
                  [[[end]]]*/
            }
        }

    }
}
